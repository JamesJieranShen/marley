/// @file
/// @copyright Copyright (C) 2016-2021 Steven Gardiner
/// @license GNU General Public License, version 3
//
// This file is part of MARLEY (Model of Argon Reaction Low Energy Yields)
//
// MARLEY is free software: you can redistribute it and/or modify it under the
// terms of version 3 of the GNU General Public License as published by the
// Free Software Foundation.
//
// For the full text of the license please see COPYING or
// visit http://opensource.org/licenses/GPL-3.0
//
// Please respect the MCnet academic usage guidelines. See GUIDELINES
// or visit https://www.montecarlonet.org/GUIDELINES for details.

#include "marley/Generator.hh"
#include "marley/OutputFile.hh"
#include "marley/RootOutputFile.hh"
#include "marley/JSONConfig.hh"

#include "TInterpreter.h"
#include "TParameter.h"

marley::RootOutputFile::RootOutputFile(const std::string& name,
  const std::string& format, const std::string& mode, bool force)
  : marley::OutputFile(name, format, mode, force)
{
  load_marley_headers();
  open();
}

void marley::RootOutputFile::open() {
  bool file_exists = check_if_file_exists(name_);

  std::string tfile_open_mode("recreate");
  if (mode_ == Mode::OVERWRITE && file_exists && !force_) {
    bool overwrite = marley_utils::prompt_yes_no(
      "Overwrite ROOT file " + name_);
    if (!overwrite) {
      MARLEY_LOG_INFO() << "Cancelling overwrite of ROOT file \""
        << name_ << '\"';
      tfile_open_mode = std::string("update");
      mode_ = Mode::RESUME;
    }
  }
  else if (mode_ == Mode::RESUME) {
    if (!file_exists) throw marley::Error("Cannot resume run. Could"
      " not open the ROOT file \"" + name_ + '\"');
    else tfile_open_mode = std::string("update");
  }
  else if (mode_ == Mode::APPEND) throw marley::Error("Cannot use the"
    " \"append\" mode with the ROOT output format");

  file_ = std::make_unique<TFile>(name_.c_str(),
    tfile_open_mode.c_str());

  // Check if there was a problem opening the file (e.g., pre-existing
  // file that has the wrong format, etc.). If so, complain and quit.
  if (file_->IsZombie()) throw marley::Error("Invalid format or other"
    " error encountered while opening the ROOT file \"" + name_ + '\"');

  if (mode_ == Mode::OVERWRITE) {
    // Create a ROOT tree to store the events
    tree_ = new TTree("MARLEY_event_tree",
      "Neutrino events generated by MARLEY");

    // We create a branch to store the events here, but set the branch
    // address to nullptr. This will be fixed later when write_event()
    // is called.
    tree_->Branch("event", "marley::Event", nullptr);
  }

  else if (mode_ == Mode::RESUME) {
    file_->GetObject("MARLEY_event_tree", tree_);
    if (!tree_) throw marley::Error("Cannot resume run. Could not find"
      " a valid MARLEY event tree in the ROOT file \"" + name_ + '\"');

    MARLEY_LOG_INFO() << "Continuing previous run from ROOT file \""
      << name_ << "\"\nwhich contains " << tree_->GetEntries()
      << " events.";

    // Get previous RNG seed from the ROOT file
    std::string* seed = nullptr;
    file_->GetObject("MARLEY_seed", seed);

    if (!seed) MARLEY_LOG_WARNING() << "Unable to read"
      << " random number generator seed saved to the ROOT file from"
      << " the previous run.";
    else MARLEY_LOG_INFO() << "The previous run was initialized using"
      << " the random number generator seed " << *seed;
  }

  else throw marley::Error("Unrecognized file mode encountered in"
    " RootOutputFile::open()");
}

void marley::RootOutputFile::load_marley_headers() {
  // Current (24 July 2016) versions of ROOT 6 require runtime loading
  // of headers for custom classes in order to use dictionaries
  // correctly. If we're running ROOT 6+, do the loading here, and give
  // the user guidance if there are any problems.
  // TODO: see if you can use the -inlineInputHeader to include the
  // headers in the libMARLEY_ROOT library and then load them at
  // runtime from there. This isn't very well documented, so your early
  // efforts at doing this didn't work out.
  static bool already_loaded = false;
  if (!already_loaded) {
    already_loaded = true;
    if (gROOT->GetVersionInt() >= 60000) {
      MARLEY_LOG_INFO() << "ROOT 6 or greater detected. Loading class"
        << " information\nfrom headers \"marley/Particle.hh\""
        << " and \"marley/Event.hh\"\n";
      TInterpreter::EErrorCode* ec = new TInterpreter::EErrorCode();
      gInterpreter->ProcessLine("#include \"marley/Particle.hh\"", ec);
      if (*ec != 0) throw marley::Error("Error loading MARLEY header"
        " Particle.hh. For MARLEY headers stored in /path/to/include/"
        "marley/, please add /path/to/include to your"
        " ROOT_INCLUDE_PATH environment variable and try again.");
      gInterpreter->ProcessLine("#include \"marley/Event.hh\"");
      if (*ec != 0) throw marley::Error("Error loading MARLEY header"
        " Event.hh. For MARLEY headers stored in"
        " /path/to/include/marley/, please add /path/to/include to"
        " your ROOT_INCLUDE_PATH environment variable and try again.");
    }
  }
}

void marley::RootOutputFile::write_generator_state(
  const marley::JSON& json_config, const marley::Generator& gen,
  const long /*num_events*/)
{
  // Use std::string objects to store MARLEY configuration and
  // random number generator state information to the ROOT file.
  // You can retrieve these strings using the TFile::GetObject()
  // function (see elsewhere in this file for an example).
  file_->cd();
  std::string config( json_config.dump_string() );
  std::string state( gen.get_state_string() );
  std::string seed( std::to_string(gen.get_seed()) );

  TParameter<double> avg_tot_xsec("MARLEY_flux_avg_xsec",
    gen.flux_averaged_total_xs());

  file_->WriteObject(&config, "MARLEY_config", "WriteDelete");
  file_->WriteObject(&state, "MARLEY_state", "WriteDelete");
  file_->WriteObject(&seed, "MARLEY_seed", "WriteDelete");
  file_->WriteTObject(&avg_tot_xsec, "MARLEY_flux_avg_xsec",
    "WriteDelete");
}

void marley::RootOutputFile::close(const marley::JSON& json_config,
  const marley::Generator& gen, const long dummy)
{
  // Write the event tree to the ROOT file, replacing the previous
  // version if one exists. Avoid data loss by not deleting the
  // previous version until the new version is completely written to
  // disk.
  file_->cd();
  tree_->Write(tree_->GetName(), TTree::kWriteDelete);

  // Save the current state of the generator to the ROOT file in case
  // we want to resume a run later
  write_generator_state(json_config, gen, dummy);

  file_->Close();
}

bool marley::RootOutputFile::resume(std::unique_ptr<marley::Generator>& gen,
  long& num_previous_events)
{
  if (mode_ != Mode::RESUME) {
    throw marley::Error("Cannot call Output"
      "File::resume() for an output mode other than"
      " \"resume\"");
    return false;
  }

  std::string* conf = nullptr;
  file_->GetObject("MARLEY_config", conf);
  if (!conf) {
    throw marley::Error("Cannot resume run. Failed to load"
      " JSON configuration from the ROOT file \"" + name_ + '\"');
    return false;
  }

  marley::JSON config = marley::JSON::load(*conf);

  std::string* state = nullptr;
  file_->GetObject("MARLEY_state", state);
  if (!state) {
    throw marley::Error("Cannot resume run. Failed to load"
      " random number generator state string from the ROOT file \""
      + name_ + '\"');
    return false;
  }

  gen = this->restore_generator( config );
  gen->seed_using_state_string(*state);

  if (!tree_) throw marley::Error("Cannot resume run. Error"
    " accessing the MARLEY event tree stored in the ROOT file \""
    + name_ + '\"');

  num_previous_events = tree_->GetEntries();

  return true;
}

void marley::RootOutputFile::write_event(const marley::Event* event) {
  if (!event) throw marley::Error("Null pointer passed to"
    " RootOutputFile::write_event()");
  tree_->SetBranchAddress("event", &event);
  tree_->Fill();
}
